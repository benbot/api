syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";
import "google/protobuf/empty.proto";
import "spacemesh/v1/smesher_types.proto";

// Readonly basic node data
service SmesherService {
    /////// Smeshing (mining) management

    // Start smeshing using client provided data
    // Returns success status if request succeeds, failure if it fails
    rpc StartSmeshing(StartSmeshingRequest) returns (StartSmeshingResponse);

    // Stop smeshing (submitting new activations) and optionally stop node roles that entitle it to rewards
    // Returns success status if request succeeds, failure if it fails
    rpc StopSmeshing(StopSmeshingRequest) returns (StopSmeshingResponse);

    // Get the current smeshing status
    rpc SmeshingStatus(google.protobuf.Empty) returns (SmeshingStatusResponse);

    // Get the current smesher id (auto generated by the node)
    rpc SmesherID(google.protobuf.Empty) returns (SmesherIDResponse);

    // Get the current coinbase account address
    rpc Coinbase(google.protobuf.Empty) returns (CoinbaseResponse);

    // Set the coinbase account address
    // Returns success if request succeeds, failure if it fails
    rpc SetCoinbase(SetCoinbaseRequest) returns (SetCoinbaseResponse);

    // Get the current min gas for including txs in blocks by this smesher
    rpc MinGas(google.protobuf.Empty) returns (MinGasResponse);

    // Set a min gas units for including txs in blocks by this smesher
    // Returns success status if request succeeds, failure if it fails
    rpc SetMinGas(SetMinGasRequest) returns (SetMinGasResponse);
    
    // Estimate smeshing rewards over the next upcoming epoch
    rpc EstimatedRewards(EstimatedRewardsRequest) returns (EstimatedRewardsResponse);

    /////// Proofs of space data files management

    // Returns a list of available providers for creating post data.
    rpc PostComputeProviders(google.protobuf.Empty) returns (PostComputeProvidersResponse);

    // STREAMS

    // Returns a stream of updates to post data file(s) during the init phase
    rpc SmeshingStatusStream(google.protobuf.Empty) returns (stream SmeshingStatusStreamResponse);
}
