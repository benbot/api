syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";
import "spacemesh/v1/types.proto";
import "google/rpc/status.proto";

message IsSmeshingResponse {
    bool is_smeshing = 1;
}

message StartSmeshingRequest {
    AccountId coinbase = 1;
    PostInitOpts opts = 2;
}

message StartSmeshingResponse {
    google.rpc.Status status = 1;
}

message StopSmeshingResponse {
    google.rpc.Status status = 1;
}

message SetCoinbaseRequest {
    AccountId id = 1;
}

message SetCoinbaseResponse {
    google.rpc.Status status = 1;
}

message MinGasResponse {
    SimpleInt mingas = 1;
}

message SetMinGasRequest {
    SimpleInt mingas = 1;
}

message SetMinGasResponse {
    google.rpc.Status status = 1;
}


message SmesherIDResponse {
    AccountId account_id = 1;
}

message CoinbaseResponse {
    AccountId account_id = 1;
}

message PostComputeProvider {
    uint32 id = 1; // 0, 1, 2...
    string model = 2; // e.g. Nvidia GTX 2700
    ComputeApiClass compute_api = 3; // A provided compute api
    uint64 performance = 4; // Estimated performance in hashes per second
}

message PostComputeProvidersResponse {
    repeated PostComputeProvider post_compute_provider = 1;
}

// Compute API class
enum ComputeApiClass {
    COMPUTE_API_CLASS_UNSPECIFIED = 0;
    COMPUTE_API_CLASS_CPU = 1; // useful for testing on systems without a cuda or vulkan GPU
    COMPUTE_API_CLASS_CUDA = 2;
    COMPUTE_API_CLASS_VULKAN = 3;
}

// Post init options. Used to define the requested options and by
// other messages which contain the options.
message PostInitOpts {
    string data_dir = 1; // User provided path to create the post data files at
    uint64 num_labels = 2; // Number of labels to generate
    uint32 num_files = 3; // Number of files to equally distribute the labels among
    uint32 compute_provider_id = 4; // A PostProvider id
    bool throttle = 5; // Throttle down setup phase computations while user is interactive on system
}

message CreatePostDataRequest {
    PostInitOpts opts = 1;
}

// Param passed to methods to indicate a request to delete data files
message StopSmeshingRequest {
    bool delete_files = 1;
}

// Proof of space data status
message PostStatus {
    PostInitOpts lastOpts = 1; // options set previously by the user
    enum FilesStatus {
        FILES_STATUS_UNSPECIFIED = 0; // Lane's favorite impossible value
        FILES_STATUS_NOT_FOUND = 1; // Expected data files do not exist
        FILES_STATUS_PARTIAL = 2; // Some files exist and init can be continued (and may be in progress)
        FILES_STATUS_COMPLETE = 3; // Expected data files are available and verified
    }
    FilesStatus files_status = 2;
    bool init_in_progress = 3; // True if init process is currently in progress
    uint64 labels_written = 4; // Bytes written to the data files (actual total files sizes)
    string error_message = 5; // Last init process error message
    enum ErrorType {
        ERROR_TYPE_UNSPECIFIED = 0; // Lane's favorite imposible value
        ERROR_TYPE_FILE_NOT_FOUND = 1; // All expected post data files not found in expected path
        ERROR_TYPE_READ_ERROR = 2; // Failure to read from a data file
        ERROR_TYPE_WRITE_ERROR = 3; // Failure to write to a data file
    }
    ErrorType error_type = 6;
}

message PostStatusResponse {
    PostStatus status = 1;
}

message PostDataCreationProgressStreamResponse {
    PostStatus status = 1;
}
