syntax = "proto3";
package spacemesh.v1;
option go_package = "github.com/spacemeshos/api/release/go/spacemesh/v1";
import "spacemesh/v1/types.proto";
import "google/rpc/status.proto";

message SmeshingStatusResponse {
    enum SmeshingStatus {
        SMESHING_STATUS_UNSPECIFIED = 0; // Lane's favorite impossible value
        SMESHING_STATUS_IDLE = 1;
        SMESHING_STATUS_CREATING_POST_DATA = 2;
        SMESHING_STATUS_ACTIVE = 3;
    }
    SmeshingStatus status = 1;
}

message StartSmeshingRequest {
    AccountId coinbase = 1;
    PostInitOpts opts = 2;
}

message StartSmeshingResponse {
    google.rpc.Status status = 1;
}

message StopSmeshingResponse {
    google.rpc.Status status = 1;
}

message SetCoinbaseRequest {
    AccountId id = 1;
}

message SetCoinbaseResponse {
    google.rpc.Status status = 1;
}

message MinGasResponse {
    SimpleInt mingas = 1;
}

message SetMinGasRequest {
    SimpleInt mingas = 1;
}

message SetMinGasResponse {
    google.rpc.Status status = 1;
}


message SmesherIDResponse {
    AccountId account_id = 1;
}

message CoinbaseResponse {
    AccountId account_id = 1;
}

message PostComputeProvider {
    uint32 id = 1; // 0, 1, 2...
    string model = 2; // e.g. Nvidia GTX 2700
    ComputeApiClass compute_api = 3; // A provided compute api
    uint64 performance = 4; // Estimated performance in hashes per second
}

message PostComputeProvidersResponse {
    repeated PostComputeProvider post_compute_provider = 1;
}

// Compute API class
enum ComputeApiClass {
    COMPUTE_API_CLASS_UNSPECIFIED = 0;
    COMPUTE_API_CLASS_CPU = 1; // useful for testing on systems without a cuda or vulkan GPU
    COMPUTE_API_CLASS_CUDA = 2;
    COMPUTE_API_CLASS_VULKAN = 3;
}

// Post init options. Used to define the requested options and by
// other messages which contain the options.
message PostInitOpts {
    string data_dir = 1; // User provided path to create the post data files at
    uint32 num_units = 2; // Number of PoST data commitment units to generate
    uint32 num_files = 3; // Number of files to equally distribute the labels among
    uint32 compute_provider_id = 4; // A PostProvider id
    bool throttle = 5; // Throttle down setup phase computations while user is interactive on system
}

message CreatePostDataRequest {
    PostInitOpts opts = 1;
}

// Param passed to methods to indicate a request to delete data files
message StopSmeshingRequest {
    bool delete_files = 1;
}

message PostComputeProvidersRequest {
    bool benchmark = 1;
}

// Proof of space data creation session status
message SessionStatus {
    PostInitOpts session_opts = 1; // The current session init options
    uint64 num_labels_written = 2; // Number of labels written to the data files
}

message PostDataCreationProgressStreamResponse {
    SessionStatus status = 1;
}

message EstimatedRewardsRequest {}

// Estimated rewards for the next epoch. Note that this is a global value that will be the
// same for all smeshers, and is based on the default minimum commitment size and fixed
// epoch length, both of which are network params.
message EstimatedRewardsResponse {
    // The amount of the total estimated reward in the next upcoming epoch
    Amount amount = 1;
    // The number of PoST data commitment units that this estimated reward corresponds to (part of global config)
    uint32 num_units = 2;
}

message ConfigResponse {
    uint32 bits_per_label = 1;
    uint64 labels_per_unit = 2;
    uint32 min_num_units = 3;
    uint32 max_num_units = 4;
}
